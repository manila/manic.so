"use strict";(self.webpackChunkmanic_so_blog=self.webpackChunkmanic_so_blog||[]).push([[699],{4392:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(4848),r=a(8453);const i={layout:"post",title:"Tic-Tac-Toe with Bitboards",date:new Date("2018-07-16T13:42:00.000Z"),authors:["manila"],tags:["algorithms","programming"]},o=void 0,s={permalink:"/2018/07/16/tic-tac-toe-bitboards",source:"@site/posts/2018-07-16-tic-tac-toe-bitboards.md",title:"Tic-Tac-Toe with Bitboards",description:"A Tic-Tac-Toe game using bitboards to store player state.",date:"2018-07-16T13:42:00.000Z",formattedDate:"July 16, 2018",tags:[{label:"algorithms",permalink:"/tags/algorithms"},{label:"programming",permalink:"/tags/programming"}],readingTime:2.14,hasTruncateMarker:!1,authors:[{name:"Manuel Nila",url:"https://github.com/manila",imageURL:"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256",key:"manila"}],frontMatter:{layout:"post",title:"Tic-Tac-Toe with Bitboards",date:"2018-07-16T13:42:00.000Z",authors:["manila"],tags:["algorithms","programming"]},unlisted:!1,prevItem:{title:"Nixer Notes",permalink:"/2018/08/31/nix-notes"}},c={authorsImageUrls:[void 0]},l=[];function d(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"A Tic-Tac-Toe game using bitboards to store player state."}),"\n",(0,n.jsx)(t.p,{children:"This post assumes you can read a bit of C code and you have a basic understanding of how numbers can be represented in binary."}),"\n",(0,n.jsx)(t.p,{children:"What is a bitboard you might ask? It is a data structure that represents player positions on a board by using a series of bits."}),"\n",(0,n.jsx)(t.p,{children:"Here is an example of how individual bits correspond to positions on a tic-tac board (3x3 grid),"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:" 1 | 2 | 3\n---|---|---      1|2|3|4|5|6|7|8|9 -> Position on Board\n 4 | 5 | 6   ->  1|0|0|0|1|0|0|0|1 -> Occupying Bit \n---|---|---\n 7 | 8 | 9\n"})}),"\n",(0,n.jsx)(t.p,{children:"Let\u2019s transform that same bit sequence from above to better represent a board."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"                     1 | 0 | 0\n             100    ---|---|---\n100010001 -> 010 ->  0 | 1 | 0\n             001    ---|---|---\n                     0 | 0 | 1 \n"})}),"\n",(0,n.jsx)(t.p,{children:"See how each individual bit corresponds to a place on the board after we\u2019ve wrapped it around to form a square, this is a bitboard."}),"\n",(0,n.jsx)(t.p,{children:"Let implement this in C"}),"\n",(0,n.jsx)(t.p,{children:"Now since there isn\u2019t a datatype in C that is 9 bits long we\u2019ll need to use a full blown integer which is 16 bits long \xaf\\_(\u30c4)_/\xaf"}),"\n",(0,n.jsx)(t.p,{children:"Two boards one for each player (X's and O's):"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c",children:"int bitboard[2] = {0, 0}; \n"})}),"\n",(0,n.jsx)(t.p,{children:"Why use bitboards to represent the game state? They are fast and relatively easy to manipulate."}),"\n",(0,n.jsx)(t.p,{children:"For example to check a horizontal win for each player board we shift (>>) the bitboard over a few places and run an and (&) operation. If the value is greater than 1 we have a win:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-c",children:"int check_win_horizontal(int bitboard)\n{\n     return ((bitboard) & (bitboard >> 1) & (bitboard >> 2));\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"The function above checks for horizontal wins, here\u2019s how:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"    111000000 RIGHT-SHIFT 1 place(s)\n  = 011100000\n\n    111000000 RIGHT-SHIFT 2 place(s)\n  = 001110000\n\n    111000000 (original Bitboard)\n    011100000 (bitboard right-shifted 1 place)\nAND 001110000 (bitboard right-shifted 2 places)\n  = 001000000 (1 bit set makes this a \u201ctrue\u201d value)\n"})}),"\n",(0,n.jsx)(t.p,{children:"If we represent the bits from above as a board by wrapping after 3 characters"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"111   011   001   001\n000 & 100 & 110 = 000\n000   000   000   000\n"})}),"\n",(0,n.jsx)(t.p,{children:"Simply put if there is overlap in placement after shifting the board a couple times places we know there were three in a row."}),"\n",(0,n.jsxs)(t.p,{children:["Cool! as you can see bitboards are powerful in that they can be manipulated using fast low level operations, ",(0,n.jsx)(t.a,{href:"https://github.com/manila/match4",children:"here"})," is another example of bitboards in a match 4 implentation."]}),"\n",(0,n.jsxs)(t.p,{children:["You can download the ",(0,n.jsx)(t.a,{href:"https://github.com/manila/tic-tac-toe/archive/master.zip",children:"source code here"})," (",(0,n.jsx)(t.a,{href:"https://github.com/manila/tic-tac-toe",children:"from github"}),")."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);