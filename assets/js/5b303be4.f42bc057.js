"use strict";(self.webpackChunkmanic_so_blog=self.webpackChunkmanic_so_blog||[]).push([[723],{3853:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2019/04/07/snake-hacks","metadata":{"permalink":"/2019/04/07/snake-hacks","source":"@site/posts/2019-04-07-snake-hacks.md","title":"Snake Hacks","description":"Reversing Google\'s Snake Game in order figure out how it works and to beat it.","date":"2019-04-07T17:22:00.000Z","formattedDate":"April 7, 2019","tags":[{"label":"programming","permalink":"/tags/programming"}],"readingTime":2.955,"hasTruncateMarker":false,"authors":[{"name":"Manuel Nila","url":"https://github.com/manila","imageURL":"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256","key":"manila"}],"frontMatter":{"layout":"post","title":"Snake Hacks","date":"2019-04-07T17:22:00.000Z","authors":"manila","tags":["programming"]},"unlisted":false,"nextItem":{"title":"Have I Been Pwned + Password-store","permalink":"/2018/10/28/hibp-pass"}},"content":"Reversing Google\'s Snake Game in order figure out how it works and to beat it.\\n\\n[Google added a snake game to Google Maps](https://snake.googlemaps.com) to celebrate April Fools (2019). This was exciting because I am working on [my own snake game](https://snake.manila.me). I decided to take a deep dive into Google\'s version to learn something and to try to hack it.\\n\\nI didn\'t know where to start so I first had to identify where the JavaScript was that was running the game. This was easy enough as there wern\'t many script on the page. After opening the debug tools in firefox on snake.googlemaps.com I found the script I was looking for was just before the closing body tag, it\'s named [v20.js](https://snake.googlemaps.com/static/js/v20.js).\\n\\nAfter running this file through a Javascript beatifier I started looking for key objects and familiar strings. Since I wanted to create a simple bot that automatically made the snake/train turn when it got to the edge of the map I was looking for the .addEventListener() method that listened for keydown events. That would give me a better understanding of how the snake is told to turn when someone presses a specific key. I was looking for the function that is called when a keydown even is triggered, finding this could allow me to call the same function that would be called on a keydown even at anytime for any reason, say for example when the snake gets close to a wall. \\n\\nHere is the obsfucated function that I found:\\n\\n```JavaScript\\nfunction wa() {\\n    var a = R;\\n    a.active || (document.addEventListener(\\"keydown\\", a.s), document.addEventListener(\\"touchstart\\", a.l, {\\n        passive: !1\\n    }),\\n    /* ... */\\n    a.active = !0, a.b.start(), p(\\"game_started\\"))\\n}\\n```\\n\\nThis function gives a way a lot of informtation. the expression ```var a = R;``` is a wonderful hint that R is likly our game object since it has a property \\"active\\" and a method named \\"start\\". I could re-write this function to help clear some things up:\\n\\n```JavaScript\\nfunction attachEventListeners() { \\\\\\\\formerly named wa()\\n    var game = R;\\n    game.active || (document.addEventListener(\\"keydown\\", game.s), document.addEventListener(\\"touchstart\\", game.l, {\\n        passive: !1\\n    }),\\n    /* ... */ \\n    game.active = !0, game.b.start(), p(\\"game_started\\"))\\n}\\n```\\nI still don\'t know what the ``` s() ``` method is that\'s called on the keydown event. After some searching I came across what looked like a constructor function with the switch statement that would check which key was pressed and then run it\'s corresponsing action. Here is the obsfucated constructor function:\\n\\n```JavaScript\\nfunction ua(a) {\\n    /* ... */\\n    this.s = function (d) {\\n        var e = d.code || d.key;\\n        if (e) switch (e) {\\n        case \\"ArrowLeft\\":\\n        case \\"Left\\":\\n        case \\"KeyA\\":\\n            P(b.b, 3);\\n            break;\\n        case \\"ArrowRight\\":\\n        case \\"Right\\":\\n        case \\"KeyD\\":\\n            P(b.b, 1);\\n            break;\\n        case \\"ArrowUp\\":\\n        case \\"Up\\":\\n        case \\"KeyW\\":\\n            P(b.b, 2);\\n            break;\\n        case \\"ArrowDown\\":\\n        case \\"Down\\":\\n        case \\"KeyS\\":\\n            P(b.b, 4)\\n        }\\n    /* ... */\\n}\\n```\\nThere is a lot of useful information here but importantly we see that``` this.s ``` is a method that translates keydown events into game actions. I don\'t need to know what the function ``` P() ``` is, now that I know what the game object is we can open the debug console and as the train is moving we can call ``` R.s({key: \\"Left\\"}) ``` and the snake will change direction as if we had pressed the left arrow key.\\n\\nI went ahead and turned this basic reversed piece of code into a bot that will play and beat the game by following a simple pattern. You can [see it in action and try it out for yourself here](https://github.com/manila/googlemaps-snake-hacks)"},{"id":"/2018/10/28/hibp-pass","metadata":{"permalink":"/2018/10/28/hibp-pass","source":"@site/posts/2018-10-28-hibp-pass.md","title":"Have I Been Pwned + Password-store","description":"I use password-store by ZX2C4 as my password manager of choice.","date":"2018-10-28T18:21:00.000Z","formattedDate":"October 28, 2018","tags":[{"label":"programming","permalink":"/tags/programming"},{"label":"privacy","permalink":"/tags/privacy"}],"readingTime":1.97,"hasTruncateMarker":false,"authors":[{"name":"Manuel Nila","url":"https://github.com/manila","imageURL":"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256","key":"manila"}],"frontMatter":{"layout":"post","title":"Have I Been Pwned + Password-store","date":"2018-10-28T18:21:00.000Z","authors":"manila","tags":["programming","privacy"]},"unlisted":false,"prevItem":{"title":"Snake Hacks","permalink":"/2019/04/07/snake-hacks"},"nextItem":{"title":"Reader Mode without JavaScript","permalink":"/2018/09/27/noscript-reader"}},"content":"I use [password-store by ZX2C4](https://passwordstore.org) as my password manager of choice.\\n\\nI also have been following Troy Hunt\'s project [haveibeenpwned.com](https://haveibeenpwned.com), this is a great tool that has received lots of praise for shining a light on just on likley it is that your credentials (emails or passwords) have already been compromised. Addionally he [provides an API](https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/) for checking your password aginst a database of known breached passwords.\\n\\n[Here](https://blog.1password.com/finding-pwned-passwords-with-1password/) is a short  write-up about how 1Password.org has used this API to discourage the re-use of a known password.\\n\\nI decided that I needed this functionality as well, so in following the footsteps of others I built an extension for password-store that you can use to check your password using the [Have I Been Pwned: API V2](https://haveibeenpwned.com/API/v2).\\n\\n**Wait! Isn\'t it unsafe to send your password to a third-party?**\\n\\nYes, absolutley.  There is however a compromise that I find personally acceptable.\\n\\nIn short the solution is to NOT send the password in it\'s entirety to the API but rather hash the password and send a small piece of said hash to the API to return a list of possible hashes that match, from there you can compare the hashed password locally with the list returned from the API and verify if there is a match.\\n\\nYou can read a more in depth explanation [here](https://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/).\\n\\n**I use password-store, how can I get this extension?**\\n\\nclone the [pass-extension-hibp](https://github.com/manila/pass-extension-hibp) repository and run ```make install```\\n\\n```git clone https://github.com/manila/pass-extension-hibp && cd pass-extension-hibp && sudo make install```\\n\\n**Here is a breif rundown of the code**\\n\\nAfter using some builtin functions in the password-store codebase to get and decrypt the password you want to check from your password store the password is immediatly SHA-1 hashed using OpenSSL\\n\\n```bash\\nget_sha1() {\\n\\techo -n $1 | openssl sha1 | awk \'{ print tolower($2) }\'\\n}\\n```\\n\\nNext we clip away the first 5 character of the password hash and include that in the API request URL. \\n\\n```bash\\ncurl -s https://api.pwnedpasswords.com/range/${password_hash:0:5}\\n```\\n\\nThen if there are any hashes containing that string of 5 characters they will be returned in a list with a pwnage count immediately followign the possible hash. We loop through the hashed that are returned and determine if any fit the bill, if so then the password has previously been pwned and is NOT safe to use.\\n\\nYou can explore the source on [github](https://github.com/manila/pass-extension-hibp)."},{"id":"/2018/09/27/noscript-reader","metadata":{"permalink":"/2018/09/27/noscript-reader","source":"@site/posts/2018-09-27-noscript-reader.md","title":"Reader Mode without JavaScript","description":"I learned about a really nifty CSS psuedo-class, the :target selector.","date":"2018-09-27T23:40:00.000Z","formattedDate":"September 27, 2018","tags":[{"label":"programming","permalink":"/tags/programming"}],"readingTime":1.425,"hasTruncateMarker":false,"authors":[{"name":"Manuel Nila","url":"https://github.com/manila","imageURL":"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256","key":"manila"}],"frontMatter":{"layout":"post","title":"Reader Mode without JavaScript","date":"2018-09-27T23:40:00.000Z","authors":"manila","tags":["programming"]},"unlisted":false,"prevItem":{"title":"Have I Been Pwned + Password-store","permalink":"/2018/10/28/hibp-pass"},"nextItem":{"title":"Nixer Notes","permalink":"/2018/08/31/nix-notes"}},"content":"I learned about a really nifty CSS psuedo-class, the :target selector.\\n\\nUsing the :target selector you can style elements when they are \\"targeted\\" by a hyperlink (aka an [anchor](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)).  This is denoted with the octothorp (#) + element name trailing the URL.\\n\\nSo in part to facilitate users without JavaScript enabled and because it\'s a neat trick, I used this CSS selector to make a reader mode toggle that doesn\'t require JavaScript.\\n\\n<a class=\\"enabled\\" href=\\"#reader\\">Try it out</a>\\n<a class=\\"disabled\\" href=\\"#\\">Toggle it back</a> \\n\\n*\\\\*this will not work if your browser has it\'s own \\"reader mode\\" enabled*\\n\\nnote the URL when toggling reader mode, when enabled the #reader element is being appended to the URL.\\n\\n**How it works**\\n\\nHere is the markup for the toggle link:\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <style>\\n      body \\n      {\\n        background: #000;\\n        color: #FFF;\\n      }  \\n\\n      :target \\n      {\\n        color: #000;\\n        background: #FFF;\\n      }  \\n\\n      :target .enabled, .disabled \\n      {\\n        display: none;\\n      }  \\n\\n      :target .disabled, .enabled\\n      {\\n        display: inline;\\n      }\\n    </style>\\n  </head>\\n  <body id=\\"reader\\">\\n    <a class=\\"enabled\\" href=\\"#reader\\">Try it out</a>\\n    <a class=\\"disabled\\" href=\\"#\\">Toggle it back</a> \\n  </body>\\n</html>\\n```\\n\\nStarting in the CSS the body is styled with white (#FFF) text on a black (#00) background. Then there is the first :target selector that swaps the colors so that it\'s not black text on a white background.  This CSS becomes \\"active\\" when the URL has #reader appended to it. Because the body element has the id of reader it then becomes targeted and thus selected with the :target psuedo-class.\\n\\nThe .disabled and .enabled CSS classes are to \\"toggle\\" the link so that you can select and deselect the #reader element easily.\\n\\nCopy the code from above, paste it into a file (e.g. index.html) and try it out for yourself!"},{"id":"/2018/08/31/nix-notes","metadata":{"permalink":"/2018/08/31/nix-notes","source":"@site/posts/2018-08-31-nix-notes.md","title":"Nixer Notes","description":"Inspired by usesthis.com I decided to share my current computer setup.","date":"2018-08-31T22:39:00.000Z","formattedDate":"August 31, 2018","tags":[{"label":"hardware","permalink":"/tags/hardware"},{"label":"linux","permalink":"/tags/linux"}],"readingTime":2.02,"hasTruncateMarker":false,"authors":[{"name":"Manuel Nila","url":"https://github.com/manila","imageURL":"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256","key":"manila"}],"frontMatter":{"layout":"post","title":"Nixer Notes","date":"2018-08-31T22:39:00.000Z","authors":"manila","tags":["hardware","linux"]},"unlisted":false,"prevItem":{"title":"Reader Mode without JavaScript","permalink":"/2018/09/27/noscript-reader"},"nextItem":{"title":"Tic-Tac-Toe with Bitboards","permalink":"/2018/07/16/tic-tac-toe-bitboards"}},"content":"Inspired by [usesthis.com](https://usesthis.com) I decided to share my current computer setup.\\n\\n**Hardware**\\n\\nAfter much deliberation between the 2018 Dell XPS 13, Huawei Matebook X Pro, Lenovo X1, I decided on a lesser known computer namely the ThinkPenguin y=mx+b or if you want to get technical the Clevo N141WU. Mine is configured with an intel core i7-8550U, with a single stick of 16GB DDR4 2400MHz Crucial Ram (with a spare slot), and a Samsung 970 EVO NVMe M.2 SSD.\\n\\n**Operating System**\\n\\nI use [Debian] linux, this is the only OS installed on my computer. If something breaks I need to figure out how to fix it or I won\'t have a computer to use, this an excellent motivator ;)\\n\\nAs a learning exercise I installed only the basics to necessary to boot, then installed and configured each component individually.\\n\\n**Window Manager**\\n\\nI use Calm Window Manager, which is the default window manager for OpenBSD. The man page for cwm is well written, I\'ve customized a few things in my .cwmrc file\\n\\n**Compositor**\\n\\nI am using compton for transparent colors and fading when opening or closing windows.  This program hasn\'t been updated in a while but it\'s working beautifully for now.\\n\\n**Terminal**\\n\\nI am using st from suckless.org.  This is included in the Debian stable repo, but to get the most out of it you should compile it yourself from [source](https://st.suckless.org/). The trick I learned here is **apt-get build-dep** *packagename*. A huge time saver when you are trying to find all the miscellaneous libraries necessary to compile said package from source.\\n\\n**Fonts**\\n\\nI am using two truetype fonts.\\n\\n**Font Awesome 4** for displaying icons in the status bar and **mononoki** as my everything else monospaced font\\n\\n**Wallpaper**\\n\\nfeh with the --bg-fill option.  I get my backgrounds from [unsplash.com](https://unsplash.com)\\n\\n**Other Software**\\n\\nPrograms I use daily\\n\\n- Rofi (Application Launcher)\\n- xbindkeys (Key Mapping)\\n- xsecurelock (Screen Lock)\\n- pass (Password Manager)\\n- Firefox\\n- Spotify\\n- vim\\n\\n**Status Bar**\\n\\n[bar by LemonBoy](https://github.com/LemonBoy/bar) with TTF font support.\\n[A bash script](https://github.com/manila/bin/blob/master/bar) that pipes information to be displayed, updated every 2 seconds \\n\\n**Backing up my scripts and dotfiles**\\n\\nGNU stow and github\\n\\nThe next time I decide to re-install nix and load my dotfiles, I can simply type: \\n```bash\\ngit pull https://manila.github.com/dotfiles ~/dotfiles && cd ~/dotfiles && stow .\\n```\\nor for my scripts:\\n```bash\\ngit pull https://manila.github.com/bin ~/bin\\n```\\n\\n**My Dotfiles**\\n\\nYou can find my dotfiles [here](https://github.com/manila/dotfiles) from github"},{"id":"/2018/07/16/tic-tac-toe-bitboards","metadata":{"permalink":"/2018/07/16/tic-tac-toe-bitboards","source":"@site/posts/2018-07-16-tic-tac-toe-bitboards.md","title":"Tic-Tac-Toe with Bitboards","description":"A Tic-Tac-Toe game using bitboards to store player state.","date":"2018-07-16T13:42:00.000Z","formattedDate":"July 16, 2018","tags":[{"label":"algorithms","permalink":"/tags/algorithms"},{"label":"programming","permalink":"/tags/programming"}],"readingTime":2.14,"hasTruncateMarker":false,"authors":[{"name":"Manuel Nila","url":"https://github.com/manila","imageURL":"https://gravatar.com/avatar/e03029db2dd81fca02a68bd402707068a80554bfedc825f5ae28cae1221977e3?size=256","key":"manila"}],"frontMatter":{"layout":"post","title":"Tic-Tac-Toe with Bitboards","date":"2018-07-16T13:42:00.000Z","authors":["manila"],"tags":["algorithms","programming"]},"unlisted":false,"prevItem":{"title":"Nixer Notes","permalink":"/2018/08/31/nix-notes"}},"content":"A Tic-Tac-Toe game using bitboards to store player state.\\n\\nThis post assumes you can read a bit of C code and you have a basic understanding of how numbers can be represented in binary.\\n\\nWhat is a bitboard you might ask? It is a data structure that represents player positions on a board by using a series of bits.\\n\\nHere is an example of how individual bits correspond to positions on a tic-tac board (3x3 grid), \\n\\n```\\n 1 | 2 | 3\\n---|---|---      1|2|3|4|5|6|7|8|9 -> Position on Board\\n 4 | 5 | 6   ->  1|0|0|0|1|0|0|0|1 -> Occupying Bit \\n---|---|---\\n 7 | 8 | 9\\n```\\n\\nLet\u2019s transform that same bit sequence from above to better represent a board.\\n\\n```\\n                     1 | 0 | 0\\n             100    ---|---|---\\n100010001 -> 010 ->  0 | 1 | 0\\n             001    ---|---|---\\n                     0 | 0 | 1 \\n```\\n\\nSee how each individual bit corresponds to a place on the board after we\u2019ve wrapped it around to form a square, this is a bitboard.\\n\\nLet implement this in C\\n\\nNow since there isn\u2019t a datatype in C that is 9 bits long we\u2019ll need to use a full blown integer which is 16 bits long \xaf\\\\\\\\\\\\_(\u30c4)\\\\_/\xaf\\n\\nTwo boards one for each player (X\'s and O\'s)\\\\:\\n\\n```c\\nint bitboard[2] = {0, 0}; \\n```\\n\\nWhy use bitboards to represent the game state? They are fast and relatively easy to manipulate.\\n\\nFor example to check a horizontal win for each player board we shift (>>) the bitboard over a few places and run an and (&) operation. If the value is greater than 1 we have a win\\\\:\\n\\n```c\\nint check_win_horizontal(int bitboard)\\n{\\n     return ((bitboard) & (bitboard >> 1) & (bitboard >> 2));\\n}\\n```\\n\\nThe function above checks for horizontal wins, here\u2019s how:\\n\\n```\\n    111000000 RIGHT-SHIFT 1 place(s)\\n  = 011100000\\n\\n    111000000 RIGHT-SHIFT 2 place(s)\\n  = 001110000\\n\\n    111000000 (original Bitboard)\\n    011100000 (bitboard right-shifted 1 place)\\nAND 001110000 (bitboard right-shifted 2 places)\\n  = 001000000 (1 bit set makes this a \u201ctrue\u201d value)\\n```\\n\\nIf we represent the bits from above as a board by wrapping after 3 characters\\n\\n```\\n111   011   001   001\\n000 & 100 & 110 = 000\\n000   000   000   000\\n```\\n\\nSimply put if there is overlap in placement after shifting the board a couple times places we know there were three in a row.\\n\\nCool! as you can see bitboards are powerful in that they can be manipulated using fast low level operations, [here](https://github.com/manila/match4) is another example of bitboards in a match 4 implentation.\\n\\nYou can download the [source code here](https://github.com/manila/tic-tac-toe/archive/master.zip) ([from github](https://github.com/manila/tic-tac-toe))."}]}')}}]);